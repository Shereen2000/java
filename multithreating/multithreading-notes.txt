A multithreaded program contains two or more parts that can run concurrently.

Each part of such a program is called a thread.

Each thread defines a separate path of execution.

Thus multithreading is a specialized form of of multitasking.


process based multitasking
--------------------------

    * A process is a program that is executing

    * Thus process based multitasking is the feature that allows your computer to 
        run two or more programs concurrently.

    * For example, process based multitasking enables you to run the Java compiler 
        at the same time that you are using a text editor or visiting a web site.

    * In process-based multitasking, a program is the smallest unit of code that 
        can be dispatched by the scheduler.



thread based multitasking
-------------------------

    * In a thread-based multitasking environment, the thread is the smallest unit
        of dispatchable code.

    * This means that a single program can perform two or more tasks simultaneously.

    * For instance, a text editor can format text at the same time that it is printing, 
        as long as these two actions are being performed by two separate threads.


Thus, process-based multitasking deals with the ‚Äúbig picture,‚Äù and thread-based multitasking 
    handles the details.

Multitasking threads require less overhead than multitasking processes. Processes are heavyweight
    tasks that require their own separate address spaces.

Interprocess communication is expensive and limited. Context switching from one process to another
     is also costly.

Threads, on the other hand, are lighter weight.

They share the same address space and cooperatively share the same heavyweight process. 

Interthread communication is inexpensive, and context switching from one thread to the next is 
    lower in cost.

While Java programs make use of process-based multitasking environments, process-based multitasking
     is not under Java‚Äôs direct control. However, multithreaded multitasking is.


Multithreading enables you to write efficient programs that make maximum use of the processing power
     available in the system.

One important way multithreading achieves this is by keeping idle time to a minimum.

This is especially important for the interactive, networked environment in which Java operates
     because idle time is common.

For example, the transmission rate of data over a network is much slower than the rate at which the
     computer can process it.

Even local file system resources are read and written at a much slower pace than they can be processed
    by the CPU.

And, of course, user input is much slower than the computer.

In a single-threaded environment, your program has to wait for each of these tasks to finish before 
it can proceed to the next one‚Äîeven though most of the time the program is idle, waiting for input.

Multithreading helps you reduce this idle time because another thread can run when one is waiting.


-----------------------------------------------------------------------------------------------------------------
JAVA THREAD MODEL
-----------------

The Java run-time system depends on threads for many things, and all the class libraries are designed
    with multithreading in mind. In fact, Java uses threads to enable the entire environment to be 
    asynchronous. This helps reduce inefficiency by preventing the waste of CPU cycles.

Threat Priorities
-----------------

Java assigns to each thread a priority that determines how that thread should be treated with respect
     to the others.

Thread priorities are integers that specify the relative priority of one thread to another.

As an absolute value, a priority is meaningless; a higher-priority thread doesn‚Äôt run any faster than 
    a lower priority thread if it is the only thread running. Instead, a thread‚Äôs priority is used to
    decide when to switch from one running thread to the next. This is called a context switch.

The rules that determine when a context switch takes place are simple:

    A thread can voluntarily relinquish control. This occurs when explicitly yielding, sleeping, or 
        when blocked. In this scenario, all other threads are examined, and the highest-priority thread 
        that is ready to run is given the CPU.

    A thread can be preempted by a higher-priority thread. In this case, a lower-priority thread that
        does not yield the processor is simply preempted‚Äîno matter what it is doing‚Äîby a higher-priority
        thread. Basically, as soon as a higher-priority thread wants to run, it does. This is called 
        preemptive multitasking.

In cases where two threads with the same priority are competing for CPU cycles,the
    situation is a bit complicated. For some operating systems, threads of equal 
    priority are time-sliced automatically in round-robin fashion. For other types
    of operating systems, threads of equal priority must voluntarily yield control
    to their peers. If they don‚Äôt, the other threads will not run.


Synchronization
---------------

Why Java Uses Synchronization in Multithreading

    * When a program has multiple threads running at the same time, they might try to use or change the 
        same data.

    * Without control, two threads might clash ‚Äî like one reading data while the other is changing it.

    * To stop this, Java uses something called a monitor (a kind of gatekeeper).

What‚Äôs a Monitor?

    * Think of a monitor like a tiny room that only one thread can enter at a time.

    * If one thread is inside, the others have to wait their turn.

    * This keeps shared data safe from being accessed at the same time by multiple threads.

How Java Helps You Do This

    * Every Java object has its own built-in monitor (you don‚Äôt need to create it yourself).

    * If you mark a method as synchronized, only one thread can run it at a time for that object.

    * Other threads must wait until the first thread is done with the method.

Why It‚Äôs Useful

    * Makes it easier to write safe code when using multiple threads.

    * Keeps your program from doing weird or unexpected things due to thread conflicts.


Messaging
---------

Messaging Between Threads in Java

    * Once your program has multiple threads, they might need to talk to each other.

    * In other programming languages, threads rely on the operating system to communicate ‚Äî this can be slow or complicated.

    * But Java makes it simple and lightweight for threads to communicate.

üßµ How Threads Communicate in Java
    
    * A thread can enter a synchronized method (a special section of code where only one thread goes at a time).

    * Once inside, the thread can wait ‚Äî it pauses there.

    * Another thread can then send a message to wake it up using special methods.

üì¨ Java‚Äôs Built-In Messaging Methods

    *Every Java object can use these methods:

    * wait() ‚Äì makes the thread pause and wait for a signal.

    * notify() ‚Äì sends a signal to wake up one waiting thread.

    * notifyAll() ‚Äì wakes up all waiting threads on that object.

‚úÖ Why This Matters

    * Makes it easier to control how threads work together.

    * Threads can take turns or react to each other in a safe and organized way.


The Threat Class and the Runnable Interface
-------------------------------------------
üßµ Java‚Äôs Multithreading Basics

    * Java uses threads to let parts of a program run at the same time.

    * A thread is like a little task or process inside your program that runs independently.

üöÄ How Java Supports Threads
    * Java‚Äôs multithreading is built on two things:

    * The Thread class (used to create and control threads).

    * The Runnable interface (used to define what a thread should do).

üßç‚Äç‚ôÇÔ∏è Thread = A Worker
    * A Thread object represents a "proxy" or handle to the actual running task.

    * You can‚Äôt directly grab the thread running in memory ‚Äî but you can control it using the Thread object.

üõ†Ô∏è Two Ways to Create a Thread
    * Extend the Thread class
    * You make a class that extends Thread and override its run() method.

Implement the Runnable interface

    * You create a class that implements Runnable, then pass it to a Thread object.

‚öôÔ∏è Thread Class Has Helpful Methods

    * Java provides many built-in methods to manage threads, like:

        start() ‚Äì starts the thread

        run() ‚Äì the code the thread will execute

        sleep() ‚Äì pause the thread for a while

        join() ‚Äì wait for a thread to finish

        isAlive() ‚Äì check if the thread is still running

üßµ All Java Programs Start With One Thread

    * Even if you don't create any threads, your Java program already runs on one called the main thread.

    * You can create more threads to do things like loading data, downloading files, or responding to users ‚Äî all at the same time!

